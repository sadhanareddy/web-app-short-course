#+title:  Object  Implementation of Mini Version of User Directory Application
#+AUTHOR: VLEAD
#+DATE: [2016-05-11 Wed]
#+PROPERTY: results output
#+PROPERTY: exports code
#+SETUPFILE: ../../../org-templates/level-0.org
#+options: ^:nil
#+LATEX: Literal LaTeX code for export


* Initialization

** Imports for Python API
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
# -*- coding: utf-8 -*-
from op_exceptions import AttributeRequired
from utils import *
#+END_SRC


** Imports and Initialization of testcases for Python API

#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
# -*- coding: utf-8 -*-
import unittest
from unittest import TestCase
from datetime import datetime

from src.obj import *
from src.op_exceptions import AttributeRequired

#+END_SRC


** Imports for utility functions

#+BEGIN_SRC python :tangle ../../src/utils.py :eval no

# module to hold all utilities/helper functions

import json

import re


#+END_SRC


** Init Files
#+BEGIN_SRC python :tangle ../../src/__init__.py :eval no
import obj
#+END_SRC

#+BEGIN_SRC python :tangle ../../tests/__init__.py :eval no
print "tests package"
#+END_SRC



* Object Model

** Custom Exceptions
   These are some of the custom exceptions used in the application.

*** AttributeRequired

#+BEGIN_SRC python :tangle ../../src/op_exceptions.py :eval no
class AttributeRequired(Exception):
    str = None

    def __init__(self, str):
        self.str = str

    def __str__(self):
        return repr(self.str)

#+END_SRC




** Utility Functions

*** is_alphabetic_string(value)
    This function take an argument and checks whether the argument contains
    only alphabets.

#+BEGIN_SRC  python :tangle ../../src/utils.py :eval no
def is_alphabetic_string(value):
    if re.search('[^a-zA-Z. ]+', value):
        return False
    else:
        return True
#+END_SRC


*** is_email(value)
    Email is a type as defined in RFC [[https://tools.ietf.org/html/rfc5321][5321]], [[https://tools.ietf.org/html/rfc5322][5322]] and [[https://tools.ietf.org/html/rfc6531][6531]].
    Following is the constructor for this class.

#+BEGIN_SRC python :tangle ../../src/utils.py :eval no
def is_email(value):
    if re.search('[^@]+@[^@]+\.[^@]+', value):
        return True
    else:
        return False
#+END_SRC



** Name

*** Construction

     Name is an alphabetical string.

#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
class Name(object):
    value = None
    def __init__(self, value):
        # value: String 
        # if the string contains any non-alphabet and non-space character,
        # raise a type error
        if is_alphabetic_string(value):
            self.value = value
        else:
            raise TypeError('%s is not a Name!' % value)

    def __str__(self):
        return self.value
#+END_SRC


*** Test the Construction
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
class TestName(TestCase):
    TESTING = True
    def test_name_type(self):
        print "test_name_type"
        new_name = Name("John")
        # correct name
        self.assertEqual(new_name.value, "John")
        # incorrect name
        self.assertRaises(TypeError, Name, "123dasd")
#+END_SRC


** Email

*** Construction

     Email is a type as defined in RFC [[https://tools.ietf.org/html/rfc5321][5321]], [[https://tools.ietf.org/html/rfc5322][5322]] and [[https://tools.ietf.org/html/rfc6531][6531]].
     Following is the constructor for this class.

#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
class Email(object):
    value = None
    def __init__(self, value):
        if is_email(value):
            self.value = value
        else:
            raise TypeError('%s is not a Email!' % value)
    def __str__(self):
        return self.value
        
#+END_SRC

*** Test the Construction
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
class TestEmail(TestCase):
    TESTING = True
    def test_email_type(self):
        print "test_email_type"
        new_email = Email("yogesh@vlabs.ac.in")
        # correct email
        self.assertEqual(new_email.value, "yogesh@vlabs.ac.in")
        # incorrect email
        self.assertRaises(TypeError, Email, "123")
#+END_SRC

** Role

*** Introduction
   A Role has got certain privileges.  In this current application, the
   privileges are understood 
   
   Different types of roles are:
   - Admin :: An admin is an user who can add, modify and delete other users
        except himself.
   - User :: A User is a user who can view all other users and can modify himself.


*** Mutable Data

     These are the data associated with Role type, which are mutable

     + Name


*** Definition
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
class Role(object):
    name = None
    admin = None
    user = None
#+END_SRC


*** Constructor

    The signature of Role is defined as follows
    #+BEGIN_EXAMPLE
    role = Role(name=<Object of Name>)
    #+END_EXAMPLE

#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def __init__(self, name):
        self.name = name
#+END_SRC

*** Test Constructor
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
class TestRole(TestCase):
    TESTING = True
    def test_role_admin(self):
        print "test_role_admin"
        self.assertEqual(Role.admin.name, 'admin')
    
    def test_role_user(self):
        print "test_role_user"
        self.assertEqual(Role.user.name, "user")
#+END_SRC


*** Set role variables
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
Role.admin = Role("admin")
Role.user = Role("user")
#+END_SRC
** User

*** Mutable Data

     These are the data associated with User type, which are mutable

     + Name
     + Email
     + Role


*** Definition
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
class User(object):
    name = None
    email = None
    role = None
#+END_SRC


*** Constructor

**** Implementation

    Signature of the constructor of =User= is as follows:

    #+BEGIN_EXAMPLE
    usr = User(name=<object of Name>, email=<object of Email>, 
              role=[<object of Role>, <object of Role> ...])
    #+END_EXAMPLE

#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def __init__(self, **kwargs):
        if 'name' not in kwargs:
            raise AttributeRequired("mandatory attribute `name` is missing")
        self.set_name(kwargs['name'])

        if 'email' not in kwargs:
            raise AttributeRequired("mandatory attribute `email` is missing")
        self.set_email(kwargs['email'])

        if 'role' not in kwargs:
            raise AttributeRequired("mandatory attribute `role` is missing")
        self.set_role(kwargs['role'])
#+END_SRC


**** Test the constructor
 #+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
class TestUser(TestCase):
    TESTING = True

    def test_user_creation(self):
        print "test_user_creation"
        user = User(name=Name('yogesh'), email=Email('yogesh@vlabs.ac.in'), role=Role.admin)
        self.assertEqual(isinstance(user, User), True)
        self.assertEqual(user.name, 'yogesh')
        self.assertEqual(user.email, 'yogesh@vlabs.ac.in')
        self.assertEqual(user.role, 'admin')
 #+END_SRC


*** Functions

**** setEmail
***** Implementaion
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def set_email(self, email):
        self.email = email.value
#+END_SRC

***** Test
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
    def test_user_set_email(self):
        print "test_user_set_email"
        user = User(name=Name('yogesh'), email=Email('yogesh@vlabs.ac.in'), role=Role.admin)
        new_email = Email('newemail@vlabs.ac.in')
        user.set_email(new_email)
        self.assertEqual(user.email, new_email.value)
#+END_SRC
**** setName
***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def set_name(self, name):
        self.name = name.value
#+END_SRC
***** Test
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
    def test_user_set_name(self):
        print "test_user_set_name"
        user = User(name=Name('yogesh'), email=Email('yogesh@vlabs.ac.in'), role=Role.admin)
        new_name = Name('newname')
        user.set_name(new_name)
        self.assertEqual(user.name, new_name.value)
#+END_SRC
**** setRole
***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def set_role(self, role):
        self.role = role.name
#+END_SRC
***** Test
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
    def test_user_set_role(self):
        print "test_user_set_role"
        user = User(name=Name('yogesh'), email=Email('yogesh@vlabs.ac.in'), role=Role.admin)
        new_role = Role.user
        user.set_role(new_role)
        self.assertEqual(user.role, new_role.name)
#+END_SRC
**** getRole
***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def get_role(self):
        return self.role
#+END_SRC
***** Test
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
    def test_user_get_role(self):
        print "test_user_get_role"
        user = User(name=Name('yogesh'), email=Email('yogesh@vlabs.ac.in'), role=Role.admin)
        self.assertEqual(user.get_role(), 'admin')
#+END_SRC

**** getEmail
***** Implementation
 #+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def get_email(self):
        return self.email
 #+END_SRC

***** Test
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
    def test_user_get_email(self):
        print "test_user_get_email"
        user = User(name=Name('yogesh'), email=Email('yogesh@vlabs.ac.in'), role=Role.admin)
        self.assertEqual(user.get_email(), 'yogesh@vlabs.ac.in')
#+END_SRC

**** getName
***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def get_name(self):
        return self.name
#+END_SRC

***** Test
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
    def test_user_get_name(self):
        print "test_user_get_name"
        user = User(name=Name('yogesh'), email=Email('yogesh@vlabs.ac.in'), role=Role.admin)
        self.assertEqual(user.get_name(), 'yogesh')
#+END_SRC

**** getAll: Nil --> set[User]

***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
#    @staticmethod
#    def get_all():
#        return users
#+END_SRC


***** Test getAll
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
    def test_user_get_all(self):
        print "test_user_get_all"

#+END_SRC

**** toClient
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def to_client(self):
        return {
            'name': self.name,
            'email': self.email,
            'role': self.role.to_client()
        }
#+END_SRC

** Session
   Session holds a user

*** Mutable Data
    Mutable attribute is
    + user

*** Definition
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
class Session(object):
    user = None
#+END_SRC

*** Constructor
**** Implementation
    Signature of the constructor of =Session= is as follows:

    #+BEGIN_EXAMPLE
    session = Session(user=<object of User>)
    #+END_EXAMPLE

#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def __init__(self, **kwargs):
        if 'user' not in kwargs:
            raise AttributeRequired('mandatory variable `user` is missing!')
        self._set_user_session(kwargs['user'])

#+END_SRC

**** Test the constructor
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
class TestSession(TestCase):
    TESTING = True

    def test_session_creation(self):
        print "test_session_creation"
        user = User(name=Name('yogesh'), email=Email('yogesh@vlabs.ac.in'), role=Role.admin)
        session = Session(user=user)
        self.assertEqual(isinstance(session, Session), True)
        self.assertEqual(session.user, user)
#+END_SRC

*** Functions
**** _set_user_session
***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def _set_user_session(self, user):
        if not isinstance(user, User):
            raise TypeError('`user` argument should be of type user')
        else:
            self.user = user
#+END_SRC
***** Test
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
    def test_set_user_session(self):
        print "test_set_user_session"
        user = User(name=Name('yogesh'), email=Email('yogesh@vlabs.ac.in'), role=Role.admin)
        session = Session(user=user)
        new_user = User(name=Name('newuser'), email=Email('newuser@vlabs.ac.in'), role=Role.user)
        session._set_user_session(new_user)
        self.assertEqual(session.user, new_user)
#+END_SRC
**** get_user_session
***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def get_user_session(self):
        return self.user
#+END_SRC
***** Test
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
    def test_get_user_session(self):
        print "test_get_user_session"
        user = User(name=Name('user'), email=Email('user@vlabs.ac.in'), role=Role.user)
        session = Session(user=user)
        self.assertEqual(session.get_user_session(), user)
#+END_SRC
** System
   System holds the system state variables.
   - user_set :: this set holds the all the users created.
   - session_set :: this set holds all the sessions created.
*** Mutable Data
    Following variables are mutable:
    + user_set
    + session_set
*** Definition
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
class System():
    user_set = set()
    session_set = set()
#+END_SRC
*** Constructor
**** Implementation
     Signature of the constructor of =System= is as follows:

     #+BEGIN_EXAMPLE
     system = System()
     #+END_EXAMPLE
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def __init__(self):
        admin_user = User(name=Name('admin'), email=Email('admin@vlabs.ac.in'), role=Role.admin)
        System.user_set.add(admin_user)
#+END_SRC
**** Test the constructor
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
    def test_session_constructor(self):
        print "test_session_constructor"
        system = System()
        user = System.user_set.pop()
        System.user_set.add(user)
        self.assertEqual(isinstance(user, User), True)
        self.assertEqual(user.name, 'admin')
        self.assertEqual(user.email, 'admin@vlabs.ac.in')
        self.assertEqual(user.role, 'admin')
#+END_SRC
*** Functions
**** add_user
***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def add_user(self):
        print "fill"
#+END_SRC

***** Test

**** del_user
***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def del_user(self):
        print "fill"
#+END_SRC
***** Test

**** show_users
***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def show_users(self):
        print "fill"
#+END_SRC
***** Test

**** get_user_by_email
***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def get_user_by_email(self):
        print "fill"
#+END_SRC

***** Test

**** make_user
***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def make_user(self):
        print "fill"
#+END_SRC
***** Test

**** get_email_of_user
***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def get_email_of_user(self):
        print "fill"
#+END_SRC
***** Test

**** get_name_of_user
***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def get_name_of_user(self):
        print "fill"
#+END_SRC
***** Test

**** get_role_of_user
***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def get_role_of_user(self):
        print "fill"
#+END_SRC

***** Test

**** login
***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def login(self):
        print "fill"
#+END_SRC
***** Test

**** del_session
***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def del_session(self):
        print "fill"
#+END_SRC
***** Test

**** show_sessions
***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def show_sessions(self):
        print "fill"
#+END_SRC
***** Test
* Run Test Cases
 
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
if __name__ == '__main__':
    unittest.main()
#+END_SRC



